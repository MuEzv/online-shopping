#version: '3.9'


services:
  mysql:
    image: mysql:8.0.33
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: AccountService
#    ports:
#      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -proot || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
    networks:
      - microservices-network

  eureka-service:
    build:
      context: ./EurekaService
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  gateway-service:
    build:
      context: ./GatewayService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      eureka-service:
        condition: service_started

  account-service:
    build:
      context: ./AccountService
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - microservices-network
    depends_on:
      mysql:
        condition: service_healthy
      eureka-service:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=dev


  item-service:
    dns:
      - 8.8.8.8
      - 8.8.4.4
    build:
      context: ./ItemService
      dockerfile: Dockerfile
#---------DevTool hotupdate
    volumes:
      - ./src:/ItemService/src
#      - ./target:/ItemService/target
    environment:
      - SPRING_DEVTOOLS_RESTART_TRIGGER_FILE=/ItemService/src
      - SPRING_PROFILES_ACTIVE=dev
#-----------------------
    ports:
      - "8081:8081"
    networks:
      - microservices-network
#    environment:
#      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      eureka-service:
        condition: service_started


#order -service config
  order-service:
    env_file: .env
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    networks:
      - microservices-network
    volumes:
      - ./OrderService:/app
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - ASTRA_DB_TOKEN=${ASTRA_DB_TOKEN}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  payment-service:
    env_file: .env
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - ASTRA_DB_TOKEN=${ASTRA_DB_TOKEN}

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
        - microservices-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5


  #first broker for OrderService
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092" #EXTERNAL
      - "9094:9094" #INTERNAL
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9094,EXTERNAL://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_JMX_PORT: 19092
      KAFKA_JMX_HOSTNAME: localhost
    depends_on:
      - zookeeper
    networks:
        - microservices-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

#  kafka ui
  kafka-ui:
      image: provectuslabs/kafka-ui:latest
      container_name: kafka-ui
      ports:
        - "9093:8080"
      environment:
        KAFKA_CLUSTERS_0_NAME: kafka
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
        KAFKA_CLUSTERS_0_METRICS_PORT: 19102
      networks:
        - microservices-network
      depends_on:
        - kafka
      logging:
        driver: "json-file"
        options:
          max-size: "10m"
          max-file: "3"


#Network configuration
networks:
  microservices-network:
    driver: bridge

volumes:
  mysql-data:
